\
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from parser import analyze_product

class Steps(StatesGroup):
    waiting_ingredients = State()

def kb_products():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("–ö—Ä–µ–º", callback_data="prod:–∫—Ä–µ–º"),
        InlineKeyboardButton("–¢–æ–Ω–∏–∫", callback_data="prod:—Ç–æ–Ω–∏–∫"),
        InlineKeyboardButton("–£–º—ã–≤–∞–ª–∫–∞", callback_data="prod:—É–º—ã–≤–∞–ª–∫–∞"),
    )
    return kb

def kb_skin():
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [
        ("–°—É—Ö–∞—è", "skin:—Å—É—Ö–∞—è"),
        ("–ñ–∏—Ä–Ω–∞—è", "skin:–∂–∏—Ä–Ω–∞—è"),
        ("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "skin:–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"),
        ("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", "skin:–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è"),
        ("–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "skin:—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"),
        ("–ó—Ä–µ–ª–∞—è", "skin:–∑—Ä–µ–ª–∞—è"),
    ]
    for text, data in buttons:
        kb.insert(InlineKeyboardButton(text, callback_data=data))
    return kb

def kb_after_result():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç", callback_data="action:change_product"),
        InlineKeyboardButton("‚ûï –ï—â—ë –æ–¥–∏–Ω —Å–æ—Å—Ç–∞–≤", callback_data="action:another"),
    )
    return kb

async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º? –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:",
        reply_markup=kb_products()
    )

async def on_choose_product(call: CallbackQuery, state: FSMContext):
    await call.answer()
    product = call.data.split(":", 1)[1]
    await state.update_data(product_type=product)
    await call.message.edit_text(
        f"–û–∫–µ–π, –ø—Ä–æ–¥—É–∫—Ç: <b>{product}</b>.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–∂–∏:",
        reply_markup=kb_skin()
    )

async def on_choose_skin(call: CallbackQuery, state: FSMContext):
    await call.answer()
    skin = call.data.split(":", 1)[1]
    await state.update_data(skin_type=skin)
    await Steps.waiting_ingredients.set()
    await call.message.edit_text(
        f"–¢–∏–ø –∫–æ–∂–∏: <b>{skin}</b>.\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ <b>—Å–æ—Å—Ç–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>:"
    )

async def on_ingredients(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    product_type = user_data.get("product_type")
    skin_type = user_data.get("skin_type")

    ingredients_raw = message.text
    ingredients = [i.strip() for i in ingredients_raw.split(",") if i.strip()]

    result = analyze_product(
        ingredients_list=ingredients,
        product_type=product_type,
        skin_type=skin_type
    )

    await message.answer(
        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</b>:\\n{result}",
        reply_markup=kb_after_result()
    )

async def on_action(call: CallbackQuery, state: FSMContext):
    await call.answer()
    action = call.data.split(":", 1)[1]
    data = await state.get_data()

    if action == "change_product":
        await state.finish()
        await call.message.edit_text("–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=kb_products())
        return

    if action == "another":
        if not data.get("product_type") or not data.get("skin_type"):
            await state.finish()
            await call.message.edit_text("–ü–æ—Ö–æ–∂–µ, –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å. –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=kb_products())
            return
        await Steps.waiting_ingredients.set()
        await call.message.edit_text(
            f"–ï—â—ë –æ–¥–∏–Ω —Å–æ—Å—Ç–∞–≤ –¥–ª—è <b>{data['product_type']}</b> / –∫–æ–∂–∞: <b>{data['skin_type']}</b>.\\n–ü—Ä–∏—à–ª–∏ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )

def register_ui_handlers(dp):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")

def register_flow_handlers(dp):
    dp.register_callback_query_handler(on_choose_product, lambda c: c.data and c.data.startswith("prod:"), state="*")
    dp.register_callback_query_handler(on_choose_skin, lambda c: c.data and c.data.startswith("skin:"), state="*")
    dp.register_callback_query_handler(on_action, lambda c: c.data and c.data.startswith("action:"), state="*")
    dp.register_message_handler(on_ingredients, state=Steps.waiting_ingredients)
