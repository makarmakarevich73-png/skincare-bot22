import re

soft_surfs = [
    "coco-glucoside", "lauryl glucoside", "decyl glucoside", "caprylyl/capryl glucoside",
    "disodium cocoamphodiacetate", "cocamidopropyl betaine", "sodium cocoyl glutamate",
    "sodium lauroyl glutamate", "sodium lauroyl methyl isethionate", "sodium methyl cocoyl taurate",
    "sodium cocoyl isethionate", "sodium lauryl glucose carboxylate", "lauryl hydroxysultaine",
    "laureth-6 carboxylic acid", "disodium lauroamphodiacetate", "sodium lauriminodipropionate",
    "sodium lauroyl oat amino acids", "potassium cocoyl hydrolyzed collagen",
    "potassium cocoyl glycinate", "disodium lauryl sulfosuccinate", "disodium oleamido mipa-sulfosuccinate",
    "lauryl glucoside citrate", "cocoamphodiacetate", "lauryl betaine", "sodium lauroyl sarcosinate",
    "sodium cocoyl sarcosinate", "sodium stearoyl glutamate", "cocoyl proline", "capryloyl glycine",
    "cocamidopropyl hydroxysultaine", "decyl polyglucose"
]

hard_surfs = [
    "sodium lauryl sulfate", "sodium laureth sulfate", "ammonium lauryl sulfate",
    "ammonium laureth sulfate", "cocamide dea", "cocamide mea", "peg-7 glyceryl cocoate",
    "sodium c14-16 olefin sulfonate", "sodium myreth sulfate", "sodium pareth sulfate",
    "sodium c12-14 pareth sulfate", "sodium laureth-8 sulfate", "ammonium xylenesulfonate",
    "sodium xylene sulfonate", "lauramide dea", "laureth-3", "laureth-4", "laureth-7",
    "sodium tallowate", "sodium palm kernelate", "sodium cocoate", "sodium palmate",
    "sodium ricinoleate", "triethanolamine lauryl sulfate", "tea-lauryl sulfate",
    "sodium dodecylbenzene sulfonate", "sodium cetyl sulfate", "sodium deceth sulfate",
    "sodium trideceth sulfate"
]

silicones = [
    "dimethicone", "cyclopentasiloxane", "cyclohexasiloxane", "amodimethicone",
    "trimethicone", "methicone", "phenyl trimethicone", "dimethiconol", "silicone quaterniums"
]

peg_40 = "peg-40"
bad_alcohols = ["alcohol", "ethanol"]
allowed_alcohols = ["cetyl alcohol", "cetearyl alcohol", "stearyl alcohol", "behenyl alcohol"]
oils_and_butters = ["oil", "butter"]

def normalize(ingredient):
    return ingredient.lower().strip()

def contains_any(ingredients, keywords):
    return any(any(k in i for k in keywords) for i in ingredients)

def count_matches(ingredients, keywords):
    return sum(any(k in i for k in keywords) for i in ingredients)

def analyze_surfactants(ingredients, skin_type):
    soft_count = count_matches(ingredients, soft_surfs)
    hard_count = count_matches(ingredients, hard_surfs)

    if skin_type in ["—Å—É—Ö–∞—è", "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è", "–∑—Ä–µ–ª–∞—è"]:
        if soft_count == 0:
            return "üü• –£–º—ã–≤–∞–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è ‚Äî –º—è–≥–∫–∏–µ –ü–ê–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        if soft_count <= 3:
            return "üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—á–∏—â–µ–Ω–∏—è."
        if 4 <= soft_count <= 7:
            return "üü® –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—á–∏—â–µ–Ω–∏—è."
        return "üü• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ü–ê–í–æ–≤ ‚Äî –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—É—à–∏–≤–∞—Ç—å –∫–æ–∂—É."

    if skin_type in ["–∂–∏—Ä–Ω–∞—è", "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"]:
        result = []
        if hard_count == 0 and 3 <= soft_count <= 7:
            result.append("üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—á–∏—â–µ–Ω–∏—è.")
        if hard_count == 1 and 2 <= soft_count <= 4:
            result.append("üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—á–∏—â–µ–Ω–∏—è.")
        if not result:
            return "üü• –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –¥–ª—è –∂–∏—Ä–Ω–æ–π/–∫–æ–º–±–∏-–∫–æ–∂–∏."
        return "\n".join(result)

    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å —É–º—ã–≤–∞–ª–∫–∏."

def analyze_toner(ingredients):
    top5 = ingredients[:5]
    has_bad_alcohol = any(a in ing for ing in top5 for a in bad_alcohols)
    has_peg_40 = any(peg_40 in ing for ing in top5)
    has_oil = any("oil" in ing or "butter" in ing for ing in top5)

    if has_bad_alcohol or has_peg_40 or has_oil:
        return "üü• –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ç–æ–ø-5. –¢–æ–Ω–∏–∫ –º–æ–∂–µ—Ç —Å—É—à–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∫–æ–∂—É."
    return "üü© –¢–æ–Ω–∏–∫ –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–æ –ø–µ—Ä–≤—ã–º 5 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º."

def analyze_cream(ingredients, skin_type):
    top10 = ingredients[:10]
    top10_norm = [normalize(i) for i in top10]

    has_alcohol = (any(a in ing for ing in top10_norm for a in bad_alcohols)
                   and not any(aa in ing for ing in top10_norm for aa in allowed_alcohols))
    has_peg_40 = any(peg_40 in i for i in top10_norm)
    silicone_count = sum(1 for s in silicones if s in top10_norm)
    first5 = top10_norm[:5]

    has_algae = any("algae" in ing for ing in top10_norm)
    has_mint = any("mentha" in ing for ing in top10_norm)
    has_tea_tree = any("tea tree" in ing for ing in top10_norm)

    if skin_type in ["—Å—É—Ö–∞—è", "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è"]:
        if has_alcohol or has_algae or has_mint or has_tea_tree:
            return "üü• –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Ä—Ç—ã, –≤–æ–¥–æ—Ä–æ—Å–ª–∏, –º—è—Ç—É –∏–ª–∏ —á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ."
        if has_peg_40:
            return "üü• –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: PEG-40 –≤ —Ç–æ–ø-10."
        if silicone_count > 1 and any(s in f for s in silicones for f in first5):
            return "üü• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–ª–∏–∫–æ–Ω–æ–≤ –≤ —Ç–æ–ø-5."
        return "üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—É—Ö–æ–π/—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–∂–∏."

    if skin_type in ["–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–∂–∏—Ä–Ω–∞—è"]:
        if has_alcohol or has_peg_40:
            return "üü• –ù–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—Å–ø–∏—Ä—Ç –∏–ª–∏ PEG-40)."
        if silicone_count > 1 or (any(s in f for s in silicones if s != "dimethicone" for f in first5)):
            return "üü• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–ª–∏–∫–æ–Ω–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Ç–æ–ø-5."
        return "üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∂–∏—Ä–Ω–æ–π/–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–∂–∏."

    if skin_type == "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è":
        if has_alcohol or any(peg_40 in f for f in first5) or silicone_count > 1:
            return "üü® –ï—Å—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ç–æ–ø-5 ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏."
        return "üü© –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–∂–∏."

    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∫—Ä–µ–º–∞."

def analyze_product(ingredients_list, product_type, skin_type=None):
    ingredients = [normalize(i) for i in ingredients_list]

    if product_type == "—É–º—ã–≤–∞–ª–∫–∞":
        return analyze_surfactants(ingredients, skin_type)
    elif product_type == "—Ç–æ–Ω–∏–∫":
        return analyze_toner(ingredients)
    elif product_type == "–∫—Ä–µ–º":
        return analyze_cream(ingredients, skin_type)
    else:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞."
